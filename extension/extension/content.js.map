{"version":3,"file":"content.js","mappings":"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","sources":["webpack://bus-occupancy-monitoring/./src/api/busLoad.js","webpack://bus-occupancy-monitoring/./src/constants.js","webpack://bus-occupancy-monitoring/./src/observer.js","webpack://bus-occupancy-monitoring/./src/ui/badge.js","webpack://bus-occupancy-monitoring/./src/ui/render.js","webpack://bus-occupancy-monitoring/./src/ui/routeCard.js","webpack://bus-occupancy-monitoring/./src/ui/tooltip.js","webpack://bus-occupancy-monitoring/./src/utils/colors.js","webpack://bus-occupancy-monitoring/./src/utils/groupBy.js","webpack://bus-occupancy-monitoring/webpack/bootstrap","webpack://bus-occupancy-monitoring/webpack/runtime/define property getters","webpack://bus-occupancy-monitoring/webpack/runtime/hasOwnProperty shorthand","webpack://bus-occupancy-monitoring/webpack/runtime/make namespace object","webpack://bus-occupancy-monitoring/./src/index.js"],"sourcesContent":["import {baseURL} from \"../constants\";\r\n\r\nexport function fetchBusLoadById(deviceId) {\r\n    return fetch(`${baseURL}/bus/${deviceId}`)\r\n        .then(res => {\r\n            if (!res.ok) throw new Error(`Ошибка, статус ${res.status}`)\r\n            return res.json()\r\n        })\r\n}\r\n\r\nexport function fetchBusLoadByDirection(directionId) {\r\n    return fetch(`${baseURL}/bus/${directionId}`)\r\n        .then(res => {\r\n            if (!res.ok) throw new Error(`Ошибка, статус ${res.status}`)\r\n            return res.json()\r\n        })\r\n}\r\n","export const routePageElementSelectors = {\r\n    header: 'div._1sv3x8qq[data-direction-id], div._6xulm8t[data-direction-id]',\r\n    station: 'div._15nfxwn',\r\n    activeTime: '._mgulo2d, ._psoawlx'\r\n}\r\n\r\nexport const coursePageElementSelectors = {\r\n    list: '._awwm2v',\r\n    cardContent: '._1a1fu9m',\r\n}\r\n\r\nexport const cardClassNames = {\r\n    card: 'gis-bus-card',\r\n    cardHeader: 'bus-header',\r\n    cardHeaderText: 'bus-header-text',\r\n    cardLoadIndicator: 'load-indicator',\r\n    cardLoadBar: 'load-bars',\r\n    cardLoadZoneBackground: 'load-zone',\r\n    cardLoadZoneForeground: 'load-zone-foreground',\r\n    tooltipClassNames: {\r\n        tooltip: 'load-tooltip',\r\n        tooltipTitle: 'tooltip-title',\r\n        tooltipZones: 'tooltip-zones',\r\n        tooltipZone: 'tooltip-zone',\r\n        tooltipZoneLabel: 'zone-label',\r\n        tooltipZoneBarContainer: 'zone-bar-container',\r\n        tooltipZoneBarFill: 'zone-fill',\r\n        tooltipZonePercentage: 'zone-percent'\r\n    },\r\n    cardDescriptionContainer: 'zone-description-container',\r\n    cardDescription: 'zone-description',\r\n    cardLoadBadgeWrapper: 'gis-course-load-badge-wrapper',\r\n    cardLoadBadge: 'load-badge',\r\n    cardLoadBadgeCourse: 'load-badge load-badge--course',\r\n    cardFooter: 'load-footer',\r\n}\r\n\r\nconst createClassNameSelectors = (classNames) => {\r\n    const result = {};\r\n\r\n    for (const [key, value] of Object.entries(classNames)) {\r\n        if (typeof value === 'object' && value !== null) {\r\n            result[key] = createClassNameSelectors(value);\r\n        } else {\r\n            result[key] = `.${value}`;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const cardClassNameSelectors = createClassNameSelectors(cardClassNames);\r\n\r\nexport const transportTypeMap = {\r\n    bus: \"Автобус\",\r\n    trolleybus: \"Троллейбус\",\r\n    tram: \"Трамвай\",\r\n    shuttle_bus: \"Маршрутка\"\r\n}\r\n\r\nexport const baseURL = 'http://localhost:3000'","export function injectScript() {\r\n    try {\r\n        const script = document.createElement('script')\r\n        script.src = chrome.runtime.getURL('inject.js')\r\n        script.onload = () => { script.remove() }\r\n        (document.head || document.documentElement).appendChild(script)\r\n    } catch (e) {\r\n        console.warn('inject failed', e)\r\n    }\r\n}\r\n","export function updateBadge(badge, avgLoad) {\r\n    const { status, text, className } = getLoadStatus(avgLoad)\r\n    badge.className = `load-badge ${className}`\r\n    badge.textContent = text\r\n    badge.dataset.status = status\r\n}\r\n\r\nexport function getLoadStatus(avgLoad) {\r\n    if (avgLoad < 0.2) {\r\n        return { status: 'empty', text: 'пустой', className: 'empty' }\r\n    } else if (avgLoad < 0.3) {\r\n        return { status: 'light', text: 'свободный', className: 'light' }\r\n    } else if (avgLoad < 0.6) {\r\n        return { status: 'medium', text: 'средний', className: 'medium' }\r\n    } else if (avgLoad < 0.7) {\r\n        return { status: 'crowded', text: 'многолюдный', className: 'crowded' }\r\n    } else if (avgLoad < 0.9) {\r\n        return { status: 'full', text: 'заполненный', className: 'full' }\r\n    } else {\r\n        return { status: 'overcrowded', text: 'переполненный', className: 'overcrowded' }\r\n    }\r\n}\r\n\r\n","import {drawCard, updateCard} from \"./routeCard\";\r\nimport {groupByDirection} from \"../utils/groupBy\";\r\nimport {\r\n    cardClassNames,\r\n    routePageElementSelectors,\r\n} from \"../constants\";\r\n\r\nexport function insertRouteContainers(latestData) {\r\n    const headers = Array.from(document.querySelectorAll(routePageElementSelectors.header))\r\n    if (!headers.length) return\r\n\r\n    const groups = latestData ? groupByDirection(latestData.devices || []) : new Map()\r\n\r\n    for (const header of headers) {\r\n        const directionId = String(header.dataset.directionId).trim()\r\n\r\n        let host = header.nextSibling\r\n\r\n        const directionGroup = groups.get(directionId)\r\n        if (!directionGroup) continue\r\n\r\n        renderDirection(host, directionId, directionGroup)\r\n    }\r\n}\r\n\r\nfunction renderDirection(host, directionId, buses) {\r\n    const stations = Array.from(host.querySelectorAll(routePageElementSelectors.station))\r\n    const untouchedStations = []\r\n\r\n    let currentMaxTime = -1\r\n    let currentMissingCount = 0\r\n\r\n    let busIndex = 0\r\n    let nodeColor = stations[0].firstElementChild.firstElementChild.style.backgroundColor\r\n\r\n    if (!buses || !buses.length) {\r\n        untouchedStations.push(...stations)\r\n        clearPreviousCards(untouchedStations)\r\n\r\n        return\r\n    }\r\n\r\n    for (const station of stations) {\r\n        const timeElement = station.querySelector(routePageElementSelectors.activeTime)\r\n        if (!timeElement) {\r\n            untouchedStations.push(station)\r\n            currentMissingCount++\r\n\r\n            continue\r\n        }\r\n\r\n        const timeValue = parseInt(timeElement.textContent.replace(' мин', '').trim())\r\n\r\n        const currentBus = buses[busIndex]\r\n        if (!currentBus) {\r\n            untouchedStations.push(station)\r\n\r\n            continue\r\n        }\r\n\r\n        if (currentMissingCount >= 3 || currentMaxTime === -1 || timeValue < currentMaxTime) {\r\n            const existingCard = station.previousElementSibling?.classList.contains(cardClassNames.card) ? station.previousElementSibling : false\r\n\r\n            if (existingCard) {\r\n                updateCard(existingCard, currentBus)\r\n            } else {\r\n                station.parentNode.insertBefore(drawCard(currentBus, nodeColor), station)\r\n            }\r\n            currentMaxTime = timeValue\r\n            busIndex++\r\n        } else {\r\n            currentMaxTime = timeValue\r\n            untouchedStations.push(station)\r\n        }\r\n\r\n        currentMissingCount = 0\r\n    }\r\n\r\n    clearPreviousCards(untouchedStations)\r\n\r\n    function clearPreviousCards(untouchedStations) {\r\n        for (const station of untouchedStations) {\r\n            const previousElement = station.previousElementSibling\r\n\r\n            const isCard = previousElement?.classList.contains(cardClassNames.card) ?? false\r\n\r\n            if (isCard) {\r\n                previousElement.remove()\r\n            }\r\n        }\r\n    }\r\n}","import {updateBadge} from \"./badge\";\r\nimport {updateTooltip} from \"./tooltip\";\r\nimport {fetchBusLoadById} from \"../api/busLoad\";\r\nimport {loadToColor} from \"../utils/colors\";\r\nimport {cardClassNames, cardClassNameSelectors, transportTypeMap} from \"../constants\";\r\n\r\nexport function drawCard(bus, nodeColor) {\r\n    const card = document.createElement('div')\r\n    card.className = cardClassNames.card\r\n    card.dataset.directionId = bus.direction_id\r\n    card.dataset.deviceId = bus.device_id\r\n\r\n    const busHeader = Object.assign(\r\n        document.createElement('div'),\r\n        { className: cardClassNames.cardHeader }\r\n    )\r\n\r\n    const loadIndicator = Object.assign(\r\n        document.createElement('div'),\r\n        { className: cardClassNames.cardLoadIndicator }\r\n    )\r\n\r\n    const busText = Object.assign(\r\n        document.createElement('div'),\r\n        {\r\n            className: cardClassNames.cardHeaderText,\r\n            textContent: `${transportTypeMap[bus.transport_type]} ${bus.route_name}`\r\n        }\r\n    )\r\n\r\n    busHeader.append(loadIndicator, busText)\r\n\r\n    const bars = Object.assign(\r\n        document.createElement('div'),\r\n        { className: cardClassNames.cardLoadBar }\r\n    )\r\n\r\n    const zone = Object.assign(\r\n        document.createElement('div'),\r\n        { className: cardClassNames.cardLoadZoneBackground }\r\n    )\r\n\r\n    const zoneForeground = Object.assign(\r\n        document.createElement('div'),\r\n        { className: cardClassNames.cardLoadZoneForeground }\r\n    )\r\n    zone.appendChild(zoneForeground)\r\n    bars.appendChild(zone)\r\n\r\n    const tooltip = Object.assign(\r\n        document.createElement('div'),\r\n        {\r\n            className: cardClassNames.tooltipClassNames.tooltip,\r\n            textContent: 'Пожалуйста, подождите...'\r\n        }\r\n    )\r\n    bars.appendChild(tooltip)\r\n\r\n    const descriptionContainer = Object.assign(\r\n        document.createElement('div'),\r\n        { className: cardClassNames.cardDescriptionContainer }\r\n    )\r\n\r\n    const descriptionText = Object.assign(\r\n        document.createElement('div'),\r\n        {\r\n            className: cardClassNames.cardDescription,\r\n            textContent: 'Загруженность:'\r\n        }\r\n    )\r\n\r\n    const badge = Object.assign(\r\n        document.createElement('div'),\r\n        {\r\n            className: cardClassNames.cardLoadBadge,\r\n            textContent: 'Загрузка...'\r\n        }\r\n    )\r\n\r\n    descriptionContainer.append(descriptionText, badge)\r\n\r\n    const footer = Object.assign(\r\n        document.createElement('div'),\r\n        { className: cardClassNames.cardFooter }\r\n    )\r\n\r\n    footer.textContent = `Устройство: ${bus.device_id}`\r\n\r\n    fetchBusLoadById(bus.device_id).then(loads => {\r\n        applyGradient(zone, loads)\r\n        updateBadgeAndTooltip(badge, tooltip, loads)\r\n    })\r\n\r\n    card.append(busHeader, bars, descriptionContainer, footer)\r\n    card.style.setProperty('--bus-line-color', nodeColor)\r\n\r\n    return card\r\n}\r\n\r\nexport function updateCard(card, bus) {\r\n    card.dataset.directionId = bus.direction_id\r\n    card.dataset.deviceId = bus.device_id\r\n\r\n    const busText = card.querySelector(cardClassNameSelectors.cardHeaderText)\r\n    if (busText) {\r\n        busText.textContent = `${transportTypeMap[bus.transport_type]} ${bus.route_name}`\r\n    }\r\n\r\n    const zone = card.querySelector(cardClassNameSelectors.cardLoadZoneBackground)\r\n    const badge = card.querySelector(cardClassNameSelectors.cardLoadBadge)\r\n    const tooltip = card.querySelector(cardClassNameSelectors.tooltipClassNames.tooltip)\r\n    const footer = card.querySelector(cardClassNameSelectors.cardFooter)\r\n\r\n    if (footer) {\r\n        footer.textContent = `Устройство: ${bus.device_id}`\r\n    }\r\n\r\n    fetchBusLoadById(bus.device_id).then(loads => {\r\n        applyGradient(zone, loads)\r\n        updateBadgeAndTooltip(badge, tooltip, loads)\r\n    })\r\n}\r\n\r\nfunction updateBadgeAndTooltip(badge, tooltip, loads) {\r\n    if (!loads.length) return\r\n\r\n    const avgLoad = loads.reduce((a, b) => a + b, 0) / loads.length\r\n\r\n    updateBadge(badge, avgLoad)\r\n    updateTooltip(tooltip, loads)\r\n}\r\n\r\nfunction applyGradient(zone, loads) {\r\n    if (!loads.length) return\r\n\r\n    const min = Math.min(...loads)\r\n    const avg = loads.reduce((a, b) => a + b, 0) / loads.length\r\n\r\n    const colorMin = loadToColor(min)\r\n    const colorAvg = loadToColor(avg)\r\n    let foreground = zone.querySelector(cardClassNameSelectors.cardLoadZoneForeground)\r\n\r\n    let backgroundGradient = `radial-gradient(circle at center,\r\n        ${colorAvg} 30%,\r\n        ${colorMin} 100%\r\n    )`\r\n\r\n    foreground.style.backgroundImage = backgroundGradient\r\n    foreground.style.opacity = '0.8'\r\n\r\n    setTimeout(() => {\r\n        zone.style.backgroundImage = backgroundGradient\r\n        foreground.style.opacity = '0'\r\n    }, 1000)\r\n}\r\n","import {cardClassNames} from \"../constants\";\r\nimport {loadToColor} from \"../utils/colors\";\r\n\r\nexport function updateTooltip(tooltip, loads) {\r\n    const zones = ['Задняя', 'Средняя', 'Передняя']\r\n\r\n    const tooltipTitle = Object.assign(\r\n        document.createElement('div'),\r\n        {\r\n            className: cardClassNames.tooltipClassNames.tooltipTitle,\r\n            textContent: 'Загруженность по зонам'\r\n        }\r\n    )\r\n\r\n    const tooltipZones = Object.assign(\r\n        document.createElement('div'),\r\n        { className: cardClassNames.tooltipClassNames.tooltipZones }\r\n    )\r\n\r\n    loads.forEach((load, index) => {\r\n        const zoneContainer = Object.assign(\r\n            document.createElement('div'),\r\n            { className: cardClassNames.tooltipClassNames.tooltipZone }\r\n        )\r\n\r\n        const zoneLabel = Object.assign(\r\n            document.createElement('div'),\r\n            {\r\n                className: cardClassNames.tooltipClassNames.tooltipZoneLabel,\r\n                textContent: zones[index]\r\n            }\r\n        )\r\n\r\n        const zoneBarContainer = Object.assign(\r\n            document.createElement('div'),\r\n            { className: cardClassNames.tooltipClassNames.tooltipZoneBarContainer }\r\n        )\r\n\r\n        const zoneFill = Object.assign(\r\n            document.createElement('div'),\r\n            {\r\n                className: cardClassNames.tooltipClassNames.tooltipZoneBarFill,\r\n                style: `width: ${load * 100}%; background: ${loadToColor(load)}`\r\n            }\r\n        )\r\n\r\n        const zonePercent = Object.assign(\r\n            document.createElement('div'),\r\n            {\r\n                className: cardClassNames.tooltipClassNames.tooltipZonePercentage,\r\n                textContent: `${Math.round(load * 100)}%`\r\n            }\r\n        )\r\n\r\n        zoneBarContainer.appendChild(zoneFill)\r\n        zoneContainer.append(zoneLabel, zoneBarContainer, zonePercent)\r\n        tooltipZones.appendChild(zoneContainer)\r\n    })\r\n\r\n    tooltip.innerHTML = ''\r\n    tooltip.append(tooltipTitle, tooltipZones)\r\n}","export function loadToColor(value) {\r\n    const v = Math.max(0, Math.min(1, value))\r\n    const hue = Math.round((1 - v) * 120)\r\n    return `hsl(${hue}, 70%, 45%)`\r\n}\r\n","export function groupByDirection(devices) {\r\n    const map = new Map()\r\n    for (const device of devices) {\r\n        const key = String(device.direction_id).trim()\r\n        if (!map.has(key)) map.set(key, [])\r\n        map.get(key).push(device)\r\n    }\r\n    return map\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { injectScript } from './observer'\r\nimport {renderCourse, insertRouteContainers} from './ui/render'\r\n\r\nlet routeData = null\r\nlet courseData = null\r\n\r\nwindow.addEventListener('message', (event) => {\r\n    if (event.source !== window) return\r\n\r\n    const msg = event.data\r\n    if (!msg) return\r\n\r\n    switch (msg.type) {\r\n        case 'ROUTE_RESPONSE':\r\n            try {\r\n                routeData = msg.payload\r\n                insertRouteContainers(routeData)\r\n            } catch (e) {\r\n                console.error('prepareRouteContainers error', e)\r\n            }\r\n            break\r\n        case 'ROUTING_API_RESPONSE':\r\n            try {\r\n                courseData = msg.payload\r\n                setTimeout(() => {\r\n                    renderCourse(courseData)\r\n                }, 200)\r\n\r\n            } catch (e) {\r\n                console.error('prepareCourseContainers error', e)\r\n            }\r\n            break\r\n    }\r\n}, false)\r\n\r\n;(function init() {\r\n    if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', injectScript)\r\n    } else {\r\n        injectScript()\r\n    }\r\n})()\r\n\r\n"],"names":["fetchBusLoadById","deviceId","fetch","concat","baseURL","then","res","ok","Error","status","json","fetchBusLoadByDirection","directionId","routePageElementSelectors","header","station","activeTime","coursePageElementSelectors","list","cardContent","cardClassNames","card","cardHeader","cardHeaderText","cardLoadIndicator","cardLoadBar","cardLoadZoneBackground","cardLoadZoneForeground","tooltipClassNames","tooltip","tooltipTitle","tooltipZones","tooltipZone","tooltipZoneLabel","tooltipZoneBarContainer","tooltipZoneBarFill","tooltipZonePercentage","cardDescriptionContainer","cardDescription","cardLoadBadgeWrapper","cardLoadBadge","cardLoadBadgeCourse","cardFooter","cardClassNameSelectors","createClassNameSelectors","classNames","result","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","key","value","_typeof","transportTypeMap","bus","trolleybus","tram","shuttle_bus","injectScript","script","document","createElement","src","chrome","runtime","getURL","onload","remove","head","documentElement","appendChild","e","console","warn","updateBadge","badge","avgLoad","_getLoadStatus","getLoadStatus","text","className","textContent","dataset","insertRouteContainers","latestData","headers","Array","from","querySelectorAll","groups","groupByDirection","devices","Map","_headers","String","trim","host","nextSibling","directionGroup","get","renderDirection","buses","stations","untouchedStations","currentMaxTime","currentMissingCount","busIndex","nodeColor","firstElementChild","style","backgroundColor","push","apply","clearPreviousCards","_i2","_stations","timeElement","querySelector","timeValue","parseInt","replace","currentBus","_station$previousElem","existingCard","previousElementSibling","classList","contains","updateCard","parentNode","insertBefore","drawCard","_step","_iterator","_createForOfIteratorHelper","s","n","done","_previousElement$clas","previousElement","err","f","direction_id","device_id","busHeader","assign","loadIndicator","busText","transport_type","route_name","append","bars","zone","zoneForeground","descriptionContainer","descriptionText","footer","loads","applyGradient","updateBadgeAndTooltip","setProperty","reduce","a","b","updateTooltip","min","Math","_toConsumableArray","avg","colorMin","loadToColor","colorAvg","foreground","backgroundGradient","backgroundImage","opacity","setTimeout","zones","forEach","load","index","zoneContainer","zoneLabel","zoneBarContainer","zoneFill","zonePercent","round","innerHTML","v","max","hue","map","device","has","set","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","routeData","courseData","window","addEventListener","event","source","msg","data","type","payload","error","renderCourse","readyState"],"sourceRoot":""}